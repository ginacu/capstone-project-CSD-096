# -*- coding: utf-8 -*-
"""Capstone_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/ginacu/capstone-project-CSD-096/blob/main/Capstone_Project.ipynb

Aplikasi Rekomendasi Skincare Berdasarkan Permasalahan Wajah
"""

# Commented out IPython magic to ensure Python compatibility.
import tensorflow as tf
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt 
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# Import the Dataset 

skincare = pd.read_csv("skincare.csv", encoding='utf-8', index_col=None)

import streamlit as st
from sklearn.manifold import TSNE 
from scipy.spatial.distance import cdist

# Choose a product category
category = st.selectbox(label='Select a product category', options= skincare['tipe_produk'].unique() )

st.write(type(category))
category_subset = skincare[skincare['tipe_produk'] == category]
# Choose a skintype
skin_type = st.selectbox(label='Select your skin type', options= ['Combination', 'Dry', 'Normal', 'Oily', 'Sensitive'] )
st.write(type(skin_type))
category_st_subset = category_subset[category_subset[skin_type] == 1]
category_st_subset
# Choose notable_effects
options_a = category_st_subset['notable_effects'].unique().tolist()
selected_options = st.multiselect('Which notable_effects do you want?',options_a)

filtered_df = category_st_subset[category_st_subset["notable_effects"].isin(selected_options)]

st.dataframe(filtered_df)

options_b = filtered_df['product_name'].unique().tolist()
product = st.selectbox(label='Select the product', options = sorted(options_b))

product

product_name = filtered_df[filtered_df["product_name"] == product]
st.dataframe(product_name)
# Reset index
product_name = product_name.reset_index(drop=True)

## MODELLING with Content Based Filtering
# Inisialisasi TfidfVectorizer
tf = TfidfVectorizer()
 
# Melakukan perhitungan idf pada data 'book_title'
tf.fit(skincare['notable_effects']) 
 
# Mapping array dari fitur index integer ke fitur nama
tf.get_feature_names()

# Melakukan fit lalu ditransformasikan ke bentuk matrix
tfidf_matrix = tf.fit_transform(skincare['notable_effects']) 
 
# Melihat ukuran matrix tfidf
shape = tfidf_matrix.shape
shape

# Mengubah vektor tf-idf dalam bentuk matriks dengan fungsi todense()
tfidf_matrix.todense()

# Membuat dataframe untuk melihat tf-idf matrix
# Kolom diisi dengan judul buku
# Baris diisi dengan author buku
 
pd.DataFrame(
    tfidf_matrix.todense(), 
    columns=tf.get_feature_names(),
    index=skincare.product_name
).sample(shape[1], axis=1).sample(10, axis=0)

# Menghitung cosine similarity pada matrix tf-idf
cosine_sim = cosine_similarity(tfidf_matrix) 
st.write(type(cosine_sim))

# Membuat dataframe dari variabel cosine_sim dengan baris dan kolom berupa author buku
cosine_sim_df = pd.DataFrame(cosine_sim, index=skincare['product_name'], columns=skincare['product_name'])
 
# Melihat similarity matrix pada setiap author buku
cosine_sim_df.sample(7, axis=1).sample(10, axis=0)

def skincare_recommendations(nama, similarity_data=cosine_sim_df, items=skincare[['product_name', 'notable_effects']], k=5):
    
    # Mengambil data dengan menggunakan argpartition untuk melakukan partisi secara tidak langsung sepanjang sumbu yang diberikan    
    # Dataframe diubah menjadi numpy
    # Range(start, stop, step)
    index = similarity_data.loc[:,nama].to_numpy().argpartition(
        range(-1, -k, -1))
    
    # Mengambil data dengan similarity terbesar dari index yang ada
    closest = similarity_data.columns[index[-1:-(k+2):-1]]
    
    # Drop nama_author agar nama buku yang dicari tidak muncul dalam daftar rekomendasi
    closest = closest.drop(nama, errors='ignore')
 
    return pd.DataFrame(closest).merge(items).head(k)

# skincare[skincare['notable_effects'].eq('Hydrating, Moisturizing')].head(1)


# Mendapatkan rekomendasi buku yang mirip dengan buku dari author Kate White

nama_produk = str(product_name['product_name'])
nama_produk = nama_produk.replace(" \nName: product_name, dtype: object", " ")
nama_produk = nama_produk[2:]
st.write(type(nama_produk))
skincare_recommendations(nama_produk)